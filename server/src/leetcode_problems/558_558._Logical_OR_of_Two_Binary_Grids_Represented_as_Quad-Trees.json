{
    "description": "A Binary Matrix is a matrix in which all the elements are either <strong>0</strong> or <strong>1</strong>.\n\nGiven <code>quadTree1</code> and <code>quadTree2</code>. <code>quadTree1</code> represents a <code>n * n</code> binary matrix and <code>quadTree2</code> represents another <code>n * n</code> binary matrix.\n\nReturn <em>a Quad-Tree</em> representing the <code>n * n</code> binary matrix which is the result of <strong>logical bitwise OR</strong> of the two binary matrixes represented by <code>quadTree1</code> and <code>quadTree2</code>.\n\nNotice that you can assign the value of a node to <strong>True</strong> or <strong>False</strong> when <code>isLeaf</code> is <strong>False</strong>, and both are <strong>accepted</strong> in the answer.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\nIf you want to know more about the Quad-Tree, you can refer to the <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.\n\n<strong>Quad-Tree format:</strong>\n\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.\n\nIf the value of <code>isLeaf</code> or <code>val</code> is True we represent it as <strong>1</strong> in the list <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as <strong>0</strong>.\n\n",
    "tags": [
        {
            "name": "Divide and Conquer",
            "url": "https://leetcode.com/tag/divide-and-conquer/"
        },
        {
            "name": "Tree",
            "url": "https://leetcode.com/tag/tree/"
        }
    ]
}