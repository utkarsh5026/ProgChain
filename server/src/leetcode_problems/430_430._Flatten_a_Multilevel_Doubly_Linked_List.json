{
    "description": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional <strong>child pointer</strong>. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a <strong>multilevel data structure</strong> as shown in the example below.\n\nGiven the <code>head</code> of the first level of the list, <strong>flatten</strong> the list so that all the nodes appear in a single-level, doubly linked list. Let <code>curr</code> be a node with a child list. The nodes in the child list should appear <strong>after</strong> <code>curr</code> and <strong>before</strong> <code>curr.next</code> in the flattened list.\n\nReturn <em>the </em><code>head</code><em> of the flattened list. The nodes in the list must have <strong>all</strong> of their child pointers set to </em><code>null</code>.\n\n",
    "tags": [
        {
            "name": "Linked List",
            "url": "https://leetcode.com/tag/linked-list/"
        },
        {
            "name": "Depth-First Search",
            "url": "https://leetcode.com/tag/depth-first-search/"
        },
        {
            "name": "Doubly-Linked List",
            "url": "https://leetcode.com/tag/doubly-linked-list/"
        }
    ]
}