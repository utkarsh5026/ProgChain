{
    "description": "You are given an <code>n x n</code> integer matrix <code>grid</code> where each value <code>grid[i][j]</code> represents the elevation at that point <code>(i, j)</code>.\n\nThe rain starts to fall. At time <code>t</code>, the depth of the water everywhere is <code>t</code>. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most <code>t</code>. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nReturn <em>the least time until you can reach the bottom right square </em><code>(n - 1, n - 1)</code><em> if you start at the top left square </em><code>(0, 0)</code>.\n\n",
    "tags": [
        {
            "name": "Array",
            "url": "https://leetcode.com/tag/array/"
        },
        {
            "name": "Binary Search",
            "url": "https://leetcode.com/tag/binary-search/"
        },
        {
            "name": "Depth-First Search",
            "url": "https://leetcode.com/tag/depth-first-search/"
        },
        {
            "name": "Breadth-First Search",
            "url": "https://leetcode.com/tag/breadth-first-search/"
        },
        {
            "name": "Union Find",
            "url": "https://leetcode.com/tag/union-find/"
        },
        {
            "name": "Heap (Priority Queue)",
            "url": "https://leetcode.com/tag/heap-priority-queue/"
        },
        {
            "name": "Matrix",
            "url": "https://leetcode.com/tag/matrix/"
        }
    ]
}