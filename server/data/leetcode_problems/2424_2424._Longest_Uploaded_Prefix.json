{
    "description": "You are given a stream of <code>n</code> videos, each represented by a <strong>distinct</strong> number from <code>1</code> to <code>n</code> that you need to \"upload\" to a server. You need to implement a data structure that calculates the length of the <strong>longest uploaded prefix</strong> at various points in the upload process.\n\nWe consider <code>i</code> to be an uploaded prefix if all videos in the range <code>1</code> to <code>i</code> (<strong>inclusive</strong>) have been uploaded to the server. The longest uploaded prefix is the <strong>maximum </strong>value of <code>i</code> that satisfies this definition.<br>\n<br>\nImplement the <code>LUPrefix </code>class:\n\n",
    "tags": [
        {
            "name": "Binary Search",
            "url": "https://leetcode.com/tag/binary-search/"
        },
        {
            "name": "Union Find",
            "url": "https://leetcode.com/tag/union-find/"
        },
        {
            "name": "Design",
            "url": "https://leetcode.com/tag/design/"
        },
        {
            "name": "Binary Indexed Tree",
            "url": "https://leetcode.com/tag/binary-indexed-tree/"
        },
        {
            "name": "Segment Tree",
            "url": "https://leetcode.com/tag/segment-tree/"
        },
        {
            "name": "Heap (Priority Queue)",
            "url": "https://leetcode.com/tag/heap-priority-queue/"
        },
        {
            "name": "Ordered Set",
            "url": "https://leetcode.com/tag/ordered-set/"
        }
    ]
}